import {
  app,
  BrowserWindow,
  ipcMain,
  nativeTheme,
  Menu,
  Tray,
  nativeImage,
} from "electron";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    minHeight: 600,
    minWidth: 800,
    height: 720,
    width: 1280,
    frame: false,
    /*
    titleBarStyle: 'hidden',
    ...(process.platform !== 'darwin' ?
      {
        titleBarOverlay:
        {
          color: '#000000',
          symbolColor: '#ffffff',
          height: 36
        }
      } : {}),
    */
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      sandbox: true, // Enforce sandboxing for security
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.webContents.openDevTools();

  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      details.responseHeaders["Content-Security-Policy"] = [
        "default-src 'self'; img-src 'self' https: data: http://localhost:5500; script-src 'self' 'unsafe-eval' https://kit.fontawesome.com; style-src 'self' 'unsafe-inline'; font-src 'self' https://ka-f.fontawesome.com; connect-src 'self' https://ka-f.fontawesome.com http://localhost:5500; object-src 'none'; media-src 'self'; frame-src 'none';",
      ];
      callback({ cancel: false, responseHeaders: details.responseHeaders });
    }
  );

  ipcMain.on("minimize-window", () => {
    if (mainWindow) {
      mainWindow.minimize();
    }
  });

  ipcMain.on("maximize-window", () => {
    if (mainWindow) {
      if (mainWindow.isMaximized()) {
        mainWindow.restore();
      } else {
        mainWindow.maximize();
      }
    }
  });

  ipcMain.on("close-window", () => {
    if (mainWindow) {
      mainWindow.close();
    }
  });

  ipcMain.handle("is-maximized", () => {
    return mainWindow ? mainWindow.isMaximized() : false;
  });

  app.setJumpList([
    {
      type: "custom",
      items: [
        {
          type: "task",
          title: "Liked Songs",
          program: process.execPath,
          iconPath: process.execPath,
          iconIndex: 0,
          description: "Open Liked Songs Playlist",
        },
        {
          type: "task",
          title: "Greek ðŸ‡¬ðŸ‡·",
          program: process.execPath,
          iconPath: process.execPath,
          iconIndex: 0,
          description: "Open Greek ðŸ‡¬ðŸ‡· Playlist",
        },
        {
          type: "task",
          title: 'No Coke (7" Mix)',
          program: process.execPath,
          iconPath: process.execPath,
          iconIndex: 0,
          description: 'Open No Coke (7" Mix) Song',
        },
        {
          type: "task",
          title: "My Shazam Tracks",
          program: process.execPath,
          iconPath: process.execPath,
          iconIndex: 0,
          description: "Open My Shazam Tracks Playlist",
        },
        {
          type: "task",
          title: "Tutankhamun",
          program: process.execPath,
          iconPath: process.execPath,
          iconIndex: 0,
          description: "Open Tutankhamun Song",
        },
      ],
    },
  ]);

  mainWindow.setThumbarButtons([
    {
      icon: nativeImage.createFromPath("src/assets/images/play-16.ico"),
      flags: ["enabled"],
      click() {
        console.log("button1 clicked.");
      },
    },
    {
      icon: nativeImage.createFromPath("src/assets/images/play-16.ico"),
      flags: ["enabled"],
      click() {
        console.log("button2 clicked.");
      },
    },
  ]);

  const createTray = (): void => {
    const tray = new Tray("src/assets/images/app_logo.png");
    tray.setToolTip(app.name);

    const troubleshootingMenu = Menu.buildFromTemplate([
      { label: "Disable Hardware Accelaration and Restart", type: "normal" },
      { label: "Reload", type: "normal" },
      { label: "Reset App Data and Restart", type: "normal" },
    ]);

    const updateTrayMenu = (): void => {
      const isHidden = mainWindow.isVisible() === false;

      const contextMenu = Menu.buildFromTemplate([
        {
          label: isHidden ? `Show ${app.name}` : "Minimize to Tray",
          type: "normal",
          click: () => {
            if (isHidden) {
              mainWindow.show();
            } else {
              mainWindow.hide();
            }
            updateTrayMenu();
          },
        },
        { label: "", type: "separator" },
        {
          label: "Troubleshooting",
          type: "submenu",
          submenu: troubleshootingMenu,
        },
        { label: "", type: "separator" },
        { label: "Exit", type: "normal", click: () => mainWindow.close() },
      ]);

      tray.setContextMenu(contextMenu);
    };

    updateTrayMenu();
  };

  createTray();
};

ipcMain.handle("dark-mode:toggle", (): boolean => {
  if (nativeTheme.shouldUseDarkColors) {
    nativeTheme.themeSource = "light";
  } else {
    nativeTheme.themeSource = "dark";
  }
  return nativeTheme.shouldUseDarkColors;
});

ipcMain.handle("dark-mode:system", (): void => {
  nativeTheme.themeSource = "system";
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
  // Set the application menu to null to hide it (no menu will be shown)
  Menu.setApplicationMenu(null);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
